/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.goodlife.api;

import java.util.List;
import java.util.Set;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.goodlife.model.ErrorResponse;
import com.goodlife.model.Product;
import com.goodlife.model.ProductKeyword;
import com.goodlife.model.ProductKeywordRequest;
import com.goodlife.model.ProductRegistry;
import com.goodlife.service.ProductService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-03-11T08:12:42.488+05:30")
@Controller
@CrossOrigin(maxAge = 3600, allowedHeaders= {"Content-Type","Accept","API-KEY","Remote_Addr","User-Agent", "USER-CITY", "USER-LANGUAGE"}, allowCredentials="false",methods= {RequestMethod.GET, RequestMethod.POST, RequestMethod.PATCH, RequestMethod.DELETE}, origins= {"*"})
@Api(value = "Product-data", description = "the Product data API")
public class ProductApi {

	@Autowired
	ProductService productService;
	
	@ApiOperation(value = "Register a product", nickname = "registerProduct", notes = "", response = Void.class, tags={ "product", })
	@ApiResponses(value = { 
			@ApiResponse(code = 201, message = "Created", response = Void.class),
			@ApiResponse(code = 400, message = "Bad request", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "Not found", response = ErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ErrorResponse.class) })
	@RequestMapping(value = "/products",
	produces = { "application/json" },
	consumes = {"application/json"},
	method = RequestMethod.POST)
	public ResponseEntity<Void> registerProduct(
			@ApiParam(value = "API-key" ,required=true) @RequestHeader(value="API-KEY", required=true) String API_KEY,
			@ApiParam(value = "Product registry request.", required = true) @Valid @RequestBody ProductRegistry body
			) throws Exception {
		productService.registerProduct(body);
		return new ResponseEntity<>(HttpStatus.CREATED);
	}
	
	@ApiOperation(value = "Get list of registered products", nickname = "getRegisteredProducts", notes = "", response = Product.class, responseContainer="list", tags={ "product", })
	@ApiResponses(value = { 
			@ApiResponse(code = 201, message = "Created", response = Product.class, responseContainer="list"),
			@ApiResponse(code = 400, message = "Bad request", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "Not found", response = ErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ErrorResponse.class) })
	@RequestMapping(value = "/products",
	produces = { "application/json" }, 
	method = RequestMethod.GET)
	public ResponseEntity<List<Product>> getRegisteredProducts(
			@ApiParam(value = "API-key" ,required=true) @RequestHeader(value="API-KEY", required=true) String API_KEY,
			@ApiParam(value = "Whether to fetch fresh data from Amazon or to send cached data itself", defaultValue="false") @Valid @RequestParam(value = "refresh", required = false, defaultValue="false") Boolean refresh,
			@ApiParam(value = "Logged in User-id", required=true) @Valid @RequestParam(value = "added_by", required = true) String addedBy
			) throws Exception {
		List<Product> registeredProducts = productService.getRegisteredProducts(addedBy, refresh);
		return new ResponseEntity<>(registeredProducts, HttpStatus.OK);
	}
	
//	@ApiOperation(value = "Get product-details with given ASIN-ID", nickname = "getProductById", notes = "", response = Product.class, tags={ "product", })
//	@ApiResponses(value = { 
//			@ApiResponse(code = 200, message = "Success", response = Product.class),
//			@ApiResponse(code = 400, message = "Bad request", response = ErrorResponse.class),
//			@ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponse.class),
//			@ApiResponse(code = 404, message = "Not found", response = ErrorResponse.class),
//			@ApiResponse(code = 405, message = "Validation exception", response = ErrorResponse.class) })
//	@RequestMapping(value = "/products/{asin_id}",
//	produces = { "text/xml" }, 
//	method = RequestMethod.GET)
//	public ResponseEntity<GetMatchingProductForIdResponse> getProductById(
//			@ApiParam(value = "API-key" ,required=true) @RequestHeader(value="API-KEY", required=true) String API_KEY,
//			@ApiParam(value = "Product ASIN ID",required=true, defaultValue="B07HMQNYVG") @PathVariable("asin_id") String asinId,
//			@ApiParam(value = "Whether to fetch fresh data from Amazon or to send cached data itself", defaultValue="false") @Valid @RequestParam(value = "refresh", required = false, defaultValue="false") Boolean refresh
//			) throws Exception {
//		GetMatchingProductForIdResponse response = productService.getProductById(asinId, refresh);
//		return new ResponseEntity<GetMatchingProductForIdResponse>(response, HttpStatus.OK);
//
//	}
//
	@ApiOperation(value = "Get keyword-details for given product", nickname = "getProductKeywords", notes = "", response = ProductKeyword.class, responseContainer="list", tags={ "product", })
	@ApiResponses(value = { 
			@ApiResponse(code = 200, message = "Success", response = ProductKeyword.class, responseContainer="list"),
			@ApiResponse(code = 400, message = "Bad request", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "Not found", response = ErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ErrorResponse.class) })
	@RequestMapping(value = "/products/{product_id}/keywords",
	produces = { "application/json" }, 
	method = RequestMethod.GET)
	public ResponseEntity<Set<ProductKeyword>> getProductKeywords(
			@ApiParam(value = "API-key" ,required=true) @RequestHeader(value="API-KEY", required=true) String API_KEY,
			@ApiParam(value = "Product ID",required=true) @PathVariable("product_id") Integer productId
			) throws Exception {
		Set<ProductKeyword> response = productService.getProductKeywords(productId);
		return new ResponseEntity<Set<ProductKeyword>>(response, HttpStatus.OK);
	}
	
	@ApiOperation(value = "Add keyword for given product", nickname = "addProductKeyword", notes = "", response = Void.class, tags={ "product", })
	@ApiResponses(value = { 
			@ApiResponse(code = 201, message = "Success", response = Void.class),
			@ApiResponse(code = 400, message = "Bad request", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "Not found", response = ErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ErrorResponse.class) })
	@RequestMapping(value = "/products/{product_id}/keywords",
	produces = { "application/json" },
	consumes = {"application/json"},
	method = RequestMethod.POST)
	public ResponseEntity<Void> addProductKeyword(
			@ApiParam(value = "API-key" ,required=true) @RequestHeader(value="API-KEY", required=true) String API_KEY,
			@ApiParam(value = "Product ID",required=true) @PathVariable("product_id") Integer productId,
			@ApiParam(value = "Product keyword request.", required = true) @Valid @RequestBody ProductKeywordRequest body
			) throws Exception {
		productService.addProductKeyword(productId, body);
		return new ResponseEntity<>(HttpStatus.CREATED);
	}
	
	@ApiOperation(value = "Delete given keyword", nickname = "deleteProductKeyword", notes = "", response = Void.class, responseContainer="list", tags={ "product", })
	@ApiResponses(value = { 
			@ApiResponse(code = 201, message = "Success", response = Void.class),
			@ApiResponse(code = 400, message = "Bad request", response = ErrorResponse.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponse.class),
			@ApiResponse(code = 404, message = "Not found", response = ErrorResponse.class),
			@ApiResponse(code = 405, message = "Validation exception", response = ErrorResponse.class) })
	@RequestMapping(value = "/keywords/{keyword_id}",
	produces = { "application/json" },
	method = RequestMethod.DELETE)
	public ResponseEntity<Void> deleteProductKeyword(
			@ApiParam(value = "API-key" ,required=true) @RequestHeader(value="API-KEY", required=true) String API_KEY,
			@ApiParam(value = "Keyword ID",required=true) @PathVariable("keyword_id") Integer keywordId
			) throws Exception {
		productService.deleteKeyword(keywordId);
		return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	}
	
//	
//	@ApiOperation(value = "Get rank-history for given keyword", nickname = "getProductRankHistory", notes = "", response = ProductRank.class, responseContainer="list", tags={ "product", })
//	@ApiResponses(value = { 
//			@ApiResponse(code = 200, message = "Success", response = ProductRank.class, responseContainer = "List"),
//			@ApiResponse(code = 400, message = "Bad request", response = ErrorResponse.class),
//			@ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponse.class),
//			@ApiResponse(code = 404, message = "Not found", response = ErrorResponse.class),
//			@ApiResponse(code = 405, message = "Validation exception", response = ErrorResponse.class) })
//	@RequestMapping(value = "/products/{asin_id}/rankhistory",
//	produces = { "application/json" }, 
//	method = RequestMethod.GET)
//	public ResponseEntity<List<ProductRank>> getProductRankHistory(
//			@ApiParam(value = "API-key" ,required=true) @RequestHeader(value="API-KEY", required=true) String API_KEY,
//			@ApiParam(value = "Product ASIN ID",required=true, defaultValue="B07HMQNYVG") @PathVariable("asin_id") String asinId,
//			@ApiParam(value = "Search-keyword",required=true) @Valid @RequestParam(value = "keyword", required = true) String keyword) throws Exception {
//		List<ProductRank> response = productService.getProductRankHistory(asinId, keyword);
//		return new ResponseEntity<List<ProductRank>>(response, HttpStatus.OK);
//
//	}
	
}
